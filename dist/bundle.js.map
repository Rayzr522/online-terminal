{"version":3,"sources":["fs.js","utils.js","output.js","main.js"],"names":["FSNode","name","type","Object","defineProperty","value","nextID","deserializeDir","dir","folder","FolderNode","children","map","child","deserializeFile","forEach","add","file","FileNode","content","call","deserialize","serialized","prototype","getPath","next","out","parent","get","find","node","exists","push","remove","index","findIndex","_id","splice","erase","write","append","Path","dirname","substr","lastIndexOf","basename","join","from","to","endsWith","FS","root","pwd","_resolve","path","newPath","startsWith","split","realpath","length","nextName","shift","touch","mkdir","readDir","readFile","writeFile","appendFile","delete","module","exports","$","query","document","querySelector","require","classes","default","error","output","handler","elementClasses","message","messageSpan","createElement","classList","innerText","appendChild","scrollTop","scrollHeight","info","sys","input","commands","handleCommand","toLowerCase","args","slice","command","result","undefined","err","registerCommand","description","names","concat","i","checkArgs","amount","usage","mapToNumbers","parseInt","filter","isNaN","window","addEventListener","JSON","parse","localStorage","getItem","fs","focus","event","keyCode","setItem","stringify","reduce","mem","numbers","first","keys","sort","longest","Math","max","repeat"],"mappings":"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","file":"bundle.js","sourceRoot":"../assets/js","sourcesContent":["function FSNode(name, type) {\n    Object.defineProperty(this, '_id', { value: FSNode.nextID++ });\n    this.name = name;\n    this.type = type;\n};\n\nFSNode.nextID = 0;\n\nfunction deserializeDir(dir) {\n    let folder = new FolderNode(dir.name);\n\n    let children = dir.children.map(child => {\n        if (child.type === 'f') {\n            return deserializeFile(child);\n        } else if (child.type === 'd') {\n            return deserializeDir(child);\n        };\n    });\n\n    children.forEach(child => folder.add(child));\n\n    return folder;\n};\n\nfunction deserializeFile(file) {\n    return new FileNode(file.name, file.content);\n};\n\nFSNode.deserialize = function (serialized) {\n    if (!serialized) return new FolderNode('');\n\n    return deserializeDir(serialized);\n};\n\nFSNode.prototype.getPath = function () {\n    let out = '';\n    let next = this;\n\n    while (next) {\n        out = next.name + '/' + out;\n        next = next.parent;\n    };\n\n    return out;\n};\n\nfunction FolderNode(name) {\n    // super()\n    FSNode.call(this, name, 'd');\n\n    this.children = [];\n};\n\nFolderNode.prototype = new FSNode();\n\nFolderNode.prototype.get = function (name) {\n    return this.children.find(node => node.name === name);\n};\n\nFolderNode.prototype.exists = function (name) {\n    return !!this.get(name);\n};\n\nFolderNode.prototype.add = function (child) {\n    if (this.exists(child.name)) {\n        return false;\n    }\n\n    if (child.parent) {\n        return false;\n    }\n\n    Object.defineProperty(child, 'parent', { value: this });\n\n    this.children.push(child);\n    return true;\n};\n\nFolderNode.prototype.remove = function (child) {\n    let index = this.children.findIndex(node => node._id === child._id);\n    if (index > -1) this.children.splice(index, 1);\n};\n\nfunction FileNode(name, content) {\n    // super()\n    FSNode.call(this, name, 'f');\n\n    this.content = content || '';\n};\n\nFileNode.prototype = new FSNode();\n\nFileNode.prototype.erase = function () {\n    this.content = '';\n};\n\nFileNode.prototype.write = function (content) {\n    this.content = content;\n};\n\nFileNode.prototype.append = function (content) {\n    this.write(this.content + content);\n};\n\nconst Path = {\n    dirname: file => file.substr(0, file.lastIndexOf('/')) || '/',\n    basename: file => file.substr(file.lastIndexOf('/') + 1),\n    join: (from, to) => from + (from.endsWith('/') ? '' : '/') + to\n};\n\nfunction FS(root, pwd) {\n    this.root = root || new FolderNode('');\n    this.pwd = pwd || '/';\n\n    if (!this.exists(this.pwd) || this.get(this.pwd).type !== 'd') {\n        this.pwd = '/';\n    }\n};\n\nFS.deserialize = function (serialized) {\n    if (!serialized) return new FS();\n\n    return new FS(FSNode.deserialize(serialized.root), serialized.pwd);\n};\n\nFS.prototype._resolve = function (path) {\n    let newPath = path;\n    let pwd = this.pwd;\n\n    if (newPath === '.') return pwd;\n    if (newPath === '..') return Path.dirname(pwd);\n\n    if (newPath.startsWith('./')) newPath = newPath.substr(2);\n\n    while (newPath.startsWith('../')) {\n        newPath = newPath.substr(3);\n        pwd = Path.dirname(pwd);\n    }\n\n    if (!newPath.startsWith('/')) {\n        newPath = Path.join(pwd, newPath);\n    }\n\n    return newPath;\n};\n\nFS.prototype.get = function (path) {\n    let realpath = this._resolve(path);\n\n    let split = realpath.substr(1).split('/');\n    let next = this.root;\n\n    while (split.length) {\n        let nextName = split.shift();\n        if (!nextName) {\n            continue;\n        }\n\n        next = next.get(nextName);\n        if (!next) {\n            return;\n        }\n\n        if (split.length > 0 && next.type !== 'd') {\n            return;\n        }\n    }\n\n    return next;\n};\n\nFS.prototype.exists = function (path) {\n    return !!this.get(path);\n};\n\nFS.prototype.touch = function (path) {\n    if (this.exists(path)) {\n        return;\n    }\n\n    let parent = this.get(Path.dirname(this._resolve(path)));\n\n    if (!parent || !parent.type === 'd') {\n        return;\n    }\n\n    parent.add(new FileNode(Path.basename(path)))\n};\n\nFS.prototype.mkdir = function (path) {\n    if (this.exists(path)) {\n        return;\n    }\n\n    let parent = this.get(Path.dirname(this._resolve(path)));\n\n    if (!parent || !parent.type === 'd') {\n        return;\n    }\n\n    parent.add(new FolderNode(Path.basename(path)));\n};\n\nFS.prototype.readDir = function (path) {\n    let dir = this.get(path);\n\n    if (!dir || dir.type !== 'd') {\n        return;\n    }\n\n    return dir.children;\n};\n\nFS.prototype.readFile = function (path) {\n    let file = this.get(path);\n\n    if (!file || file.type !== 'f') {\n        return;\n    }\n\n    return file.content;\n};\n\nFS.prototype.writeFile = function (path, content) {\n    let file = this.get(path);\n\n    if (!file || file.type !== 'f') {\n        return;\n    }\n\n    file.write(content);\n};\n\nFS.prototype.appendFile = function (path, content) {\n    let file = this.get(path);\n\n    if (!file || file.type !== 'f') {\n        return;\n    }\n\n    file.append(content);\n};\n\nFS.prototype.delete = function (path) {\n    let node = this.get(path);\n\n    if (!node || !node.parent) {\n        return;\n    }\n\n    node.parent.remove(node);\n};\n\nmodule.exports = FS;","/**\n * @param {string} query The query to search for.\n * @return {HTMLElement?} An HTML element that matches your query.\n */\nconst $ = query => document.querySelector(query);\n\nmodule.exports = {\n    $\n};","const { $ } = require('./utils');\n\nconst classes = {\n    default: ['output-item'],\n    error: ['output-item', 'output-item-error']\n};\n\nconst output = $('.commandOutput');\n\nconst handler = elementClasses => {\n    return message => {\n        const messageSpan = document.createElement('div');\n        messageSpan.classList.add(...elementClasses);\n        messageSpan.innerText = message + '\\n';\n        output.appendChild(messageSpan);\n        output.scrollTop = output.scrollHeight;\n    };\n};\n\nmodule.exports = {\n    info: handler(classes.default),\n    error: handler(classes.error)\n};","const FS = require('./fs');\nconst output = require('./output');\n\nlet sys;\nlet input;\nlet commands = {};\n\nwindow.addEventListener('load', function () {\n    sys = JSON.parse(localStorage.getItem('sys') || '{}');\n    sys.fs = FS.deserialize(sys.fs);\n\n    input = document.querySelector('.commandInput');\n    input.focus();\n\n    document.addEventListener('keydown', event => {\n        if (event.keyCode === 13) {\n            handleCommand(input.value);\n            input.value = '';\n        }\n    });\n\n    module.exports = { sys, commands };\n});\n\nwindow.addEventListener('unload', function () {\n    localStorage.setItem('sys', JSON.stringify(sys));\n});\n\n\nfunction handleCommand(input) {\n    output.info(`$ ${input}`);\n\n    let split = input.split(' ');\n    let name = split[0].toLowerCase();\n    let args = split.slice(1);\n\n    let command = commands[name];\n    let error;\n\n    if (command) {\n        try {\n            let result = command(args);\n            if (result !== undefined) {\n                output.info(`${result}`);\n            }\n        } catch (err) {\n            error = err;\n        }\n    } else {\n        error = 'Unknown command: ' + name;\n    }\n\n    if (error) {\n        output.error(error);\n    }\n}\n\nfunction registerCommand(name, description, handler) {\n    let names = [].concat(name).map(i => i.toLowerCase());\n    handler.description = description;\n    names.forEach(i => commands[i] = handler);\n}\n\nfunction checkArgs(args, amount, usage) {\n    if (args.length < amount) {\n        throw 'Usage: ' + usage;\n    }\n}\n\nfunction mapToNumbers(args) {\n    return args.map(i => parseInt(i)).filter(i => !isNaN(i));\n}\n\n// Math\nregisterCommand(['add', '+'], 'adds two or more numbers', args => mapToNumbers(args).reduce((mem, next) => mem + next, 0));\nregisterCommand(['subtract', '-'], 'subtracts two or more numbers', args => {\n    let numbers = mapToNumbers(args);\n    let first = numbers.shift();\n    return numbers.reduce((mem, next) => mem - next, first);\n});\nregisterCommand(['multiply', '*'], 'multiplies two or more numbers', args => mapToNumbers(args).reduce((mem, next) => mem * next, 1));\n\n\n// Filesystem\nregisterCommand('cd', 'changes the current working directory to a different folder', args => {\n    checkArgs(args, 1, 'cd <folder>');\n\n    let path = sys.fs._resolve(args[0]);\n    let node = sys.fs.get(path);\n\n    if (node && node.type === 'd') {\n        sys.fs.pwd = path;\n    } else {\n        throw 'The folder \"' + path + '\" does not exist!';\n    }\n\n    return path;\n});\n\nregisterCommand('pwd', 'shows the current working directory', () => sys.fs.pwd || '/');\nregisterCommand('ls', 'lists all files in the current directory', args => sys.fs.readDir(args[0] || '').map(node => node.name + (node.type === 'd' ? '/' : '')).join('\\n'));\nregisterCommand('touch', 'creates or updates the timestamp for the given file', args => checkArgs(args, 1, 'touch <file>') || sys.fs.touch(args[0]));\nregisterCommand('mkdir', 'makes a new directory', args => checkArgs(args, 1, 'mkdir <folder>') || sys.fs.mkdir(args[0]));\nregisterCommand('cat', 'outputs the contents of a file', args => checkArgs(args, 1, 'cat <file>') || sys.fs.readFile(args[0]));\nregisterCommand('write', 'writes the given contents to a file', args => checkArgs(args, 1, 'write <file> [contents]') || sys.fs.writeFile(args[0], args.slice(1).join(' ') + '\\n'));\nregisterCommand('append', 'appends the given contents to a file', args => checkArgs(args, 1, 'append <file> [contents]') || sys.fs.appendFile(args[0], args.slice(1).join(' ') + '\\n'));\nregisterCommand('rm', 'removes a file', args => checkArgs(args, 1, 'rm <path>') || sys.fs.delete(args[0]));\n\nregisterCommand('help', 'shows a list of all commands', () => {\n    let keys = Object.keys(commands).sort();\n    let longest = keys.reduce((mem, next) => Math.max(mem, next.length), 0);\n    return keys.map(name => `${name}${' '.repeat(longest - name.length)} : ${commands[name].description}`).join('\\n')\n});"]}